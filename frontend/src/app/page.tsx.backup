"use client";

import { useEffect, useState } from "react";
import DocumentTable from "@/components/DocumentTable";
import Activities from "@/components/Activities";
import { MoreVertical } from "lucide-react";
import { filesAPI, logsAPI } from "@/lib/api";

interface Stats {
  drafts: number;
  actionNeeded: number;
  pending: number;
  completed: number;
  totalDocumentsPercent: number;
  userGrowth: number;
}

interface Document {
  id: string;
  serialNo: string;
  dueDate: string;
  assignee: string;
  email: string;
  status: string;
}

interface Activity {
  user: string;
  action: string;
  doc: string;
  time: string;
}

interface FileItem {
  id: string;
  status: string;
  created_at: string;
  uploader_name?: string;
}

interface LogItem {
  id: string;
  user_id: string;
  user_name?: string;
  action: string;
  details: string;
  created_at: string;
}

export default function Home() {
  const [stats, setStats] = useState<Stats | null>(null);
  const [recentDocuments, setRecentDocuments] = useState<Document[]>([]);
  const [activities, setActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(true);
  const [timeFilter, setTimeFilter] = useState<"Weekly" | "Monthly" | "Yearly">(
    "Weekly"
  );

  useEffect(() => {
    async function fetchData() {
      try {
        const [filesData, logsData] = await Promise.all([
          filesAPI.getAll(1, 100),
          logsAPI.getAll(1, 100),
        ]);

        const files: FileItem[] = filesData.files || [];
        const logs: LogItem[] = logsData.logs || [];

        const drafts = files.filter((f) => f.status === "draft").length;
        const actionNeeded = files.filter(
          (f) => f.status === "pending" || f.status === "waiting"
        ).length;
        const pending = files.filter((f) => f.status === "pending").length;
        const completed = files.filter(
          (f) => f.status === "signed" || f.status === "completed"
        ).length;

        const totalFiles = files.length;
        const totalDocumentsPercent =
          totalFiles > 0 ? (completed / totalFiles) * 100 : 0;

        const uniqueUsers = new Set(logs.map((log) => log.user_id)).size;

        setStats({
          drafts,
          actionNeeded,
          pending,
          completed,
          totalDocumentsPercent,
          userGrowth: uniqueUsers,
        });

        const recentFiles = files
          .sort(
            (a, b) =>
              new Date(b.created_at).getTime() -
              new Date(a.created_at).getTime()
          )
          .slice(0, 5)
          .map(
            (file): Document => ({
              id: file.id,
              serialNo: file.id?.substring(0, 8) || "N/A",
              dueDate: file.created_at
                ? new Date(file.created_at).toLocaleDateString("en-US", {
                    month: "short",
                    day: "2-digit",
                    year: "numeric",
                  })
                : "N/A",
              assignee: file.uploader_name || "Unknown",
              email: "johndoe@gmail.com",
              status: file.status || "draft",
            })
          );

        setRecentDocuments(recentFiles);

        const recentLogs = logs
          .sort(
            (a, b) =>
              new Date(b.created_at).getTime() -
              new Date(a.created_at).getTime()
          )
          .slice(0, 10)
          .map((log): Activity => {
            const details = log.details || "";
            const documentName = details.includes(":")
              ? details.split(":").slice(1).join(":").trim()
              : details;

            const logTime = new Date(log.created_at);
            const now = new Date();
            const diffMs = now.getTime() - logTime.getTime();
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            let timeAgo = "Just Now";
            if (diffDays > 0) {
              timeAgo = `${diffDays} week${diffDays > 7 ? "s" : ""} ago`;
            } else if (diffHours > 0) {
              timeAgo = `${diffHours} hour${diffHours > 1 ? "s" : ""} ago`;
            } else if (diffMins > 0) {
              timeAgo = `${diffMins} minute${diffMins > 1 ? "s" : ""} ago`;
            }

            return {
              user: log.user_name || "Unknown",
              action: log.action || "performed action",
              doc: documentName || "N/A",
              time: timeAgo,
            };
          });

        setActivities(recentLogs);
      } catch (error) {
        console.error("Error fetching data:", error);
        setStats({
          drafts: 0,
          actionNeeded: 0,
          pending: 0,
          completed: 0,
          totalDocumentsPercent: 0,
          userGrowth: 0,
        });
        setRecentDocuments([]);
        setActivities([]);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg text-gray-600">Loading...</div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-xl font-semibold text-gray-900">Overview</h1>
        <div className="flex items-center gap-3">
          <div className="flex items-center bg-white border border-gray-300 rounded-md overflow-hidden">
            <button
              onClick={() => setTimeFilter("Weekly")}
              className={`px-3 py-1.5 text-xs font-medium transition-colors ${
                timeFilter === "Weekly"
                  ? "bg-white text-gray-900"
                  : "text-gray-600 bg-gray-50"
              }`}
            >
              Weekly
            </button>
            <button
              onClick={() => setTimeFilter("Monthly")}
              className={`px-3 py-1.5 text-xs font-medium transition-colors border-x border-gray-300 ${
                timeFilter === "Monthly"
                  ? "bg-white text-gray-900"
                  : "text-gray-600 bg-gray-50"
              }`}
            >
              Monthly
            </button>
            <button
              onClick={() => setTimeFilter("Yearly")}
              className={`px-3 py-1.5 text-xs font-medium transition-colors ${
                timeFilter === "Yearly"
                  ? "bg-white text-gray-900"
                  : "text-gray-600 bg-gray-50"
              }`}
            >
              Yearly
            </button>
          </div>
          <button className="flex items-center gap-1.5 px-3 py-1.5 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
            <svg
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
            >
              <line x1="4" y1="21" x2="4" y2="14" />
              <line x1="4" y1="10" x2="4" y2="3" />
              <line x1="12" y1="21" x2="12" y2="12" />
              <line x1="12" y1="8" x2="12" y2="3" />
              <line x1="20" y1="21" x2="20" y2="16" />
              <line x1="20" y1="12" x2="20" y2="3" />
            </svg>
            <span className="text-xs font-medium text-gray-700">Filter</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="bg-white rounded-md p-4 border border-gray-200">
          <div className="text-xs text-gray-600 mb-2">Drafts</div>
          <div className="flex items-baseline justify-between">
            <div className="text-xl font-bold text-gray-900">
              {stats?.drafts?.toLocaleString("en-US", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
              }) || "200,425.87"}
            </div>
            <div className="text-xs font-semibold text-green-600">+2.5%</div>
          </div>
        </div>

        <div className="bg-white rounded-md p-4 border border-gray-200">
          <div className="text-xs text-gray-600 mb-2">Action Needed</div>
          <div className="flex items-baseline justify-between">
            <div className="text-xl font-bold text-gray-900">
              {stats?.actionNeeded?.toLocaleString("en-US") || "9,528"}
            </div>
            <div className="text-xs font-semibold text-green-600">+9.5%</div>
          </div>
        </div>

        <div className="bg-white rounded-md p-4 border border-gray-200">
          <div className="text-xs text-gray-600 mb-2">Pending</div>
          <div className="flex items-baseline justify-between">
            <div className="text-xl font-bold text-gray-900">
              {stats?.pending?.toLocaleString("en-US", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
              }) || "849.54"}
            </div>
            <div className="text-xs font-semibold text-red-600">-1.6%</div>
          </div>
        </div>

        <div className="bg-white rounded-md p-4 border border-gray-200">
          <div className="text-xs text-gray-600 mb-2">Completed</div>
          <div className="flex items-baseline justify-between">
            <div className="text-xl font-bold text-gray-900">
              {stats?.completed?.toLocaleString("en-US") || "9,528"}
            </div>
            <div className="text-xs font-semibold text-green-600">+3.5%</div>
          </div>
        </div>
      </div>

      {/* Charts and Activities Row */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        {/* Total Documents Chart */}
        <div className="bg-white rounded-md border border-gray-200 p-4">
          <div className="flex items-start justify-between mb-3">
            <div>
              <h3 className="text-sm font-semibold text-gray-900">
                Total Documents
              </h3>
              <p className="text-xs text-gray-500 mt-0.5">
                Document created and received
              </p>
            </div>
            <button className="text-gray-400 hover:text-gray-600">
              <MoreVertical size={16} />
            </button>
          </div>
          <div className="mb-3">
            <div className="text-2xl font-bold text-gray-900">
              {stats?.totalDocumentsPercent?.toFixed(2) || "4.26"}%
            </div>
            <div className="text-xs text-red-500 mt-0.5">
              -0.31% than last Week
            </div>
          </div>
          <div className="h-16">
            <svg
              width="100%"
              height="100%"
              viewBox="0 0 200 60"
              preserveAspectRatio="none"
            >
              <polyline
                points="0,45 25,42 50,40 75,38 100,35 125,33 150,30 175,28 200,25"
                fill="none"
                stroke="#EF4444"
                strokeWidth="1.5"
              />
              <polyline
                points="0,45 25,42 50,40 75,38 100,35 125,33 150,30 175,28 200,25 200,60 0,60"
                fill="url(#redGradient)"
                opacity="0.08"
              />
              <defs>
                <linearGradient
                  id="redGradient"
                  x1="0%"
                  y1="0%"
                  x2="0%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#EF4444" stopOpacity="0.2" />
                  <stop offset="100%" stopColor="#EF4444" stopOpacity="0" />
                </linearGradient>
              </defs>
            </svg>
          </div>
        </div>

        {/* User Growth Chart */}
        <div className="bg-white rounded-md border border-gray-200 p-4">
          <div className="flex items-start justify-between mb-3">
            <div>
              <h3 className="text-sm font-semibold text-gray-900">
                User Growth
              </h3>
              <p className="text-xs text-gray-500 mt-0.5">
                New signups website + mobile
              </p>
            </div>
            <button className="text-gray-400 hover:text-gray-600">
              <MoreVertical size={16} />
            </button>
          </div>
          <div className="mb-3">
            <div className="text-2xl font-bold text-gray-900">
              {stats?.userGrowth?.toLocaleString() || "3,768"}
            </div>
            <div className="text-xs text-green-500 mt-0.5">
              +3.85% than last Week
            </div>
          </div>
          <div className="h-16">
            <svg
              width="100%"
              height="100%"
              viewBox="0 0 200 60"
              preserveAspectRatio="none"
            >
              <polyline
                points="0,40 25,38 50,37 75,35 100,32 125,30 150,27 175,24 200,20"
                fill="none"
                stroke="#10B981"
                strokeWidth="1.5"
              />
              <polyline
                points="0,40 25,38 50,37 75,35 100,32 125,30 150,27 175,24 200,20 200,60 0,60"
                fill="url(#greenGradient)"
                opacity="0.08"
              />
              <defs>
                <linearGradient
                  id="greenGradient"
                  x1="0%"
                  y1="0%"
                  x2="0%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#10B981" stopOpacity="0.2" />
                  <stop offset="100%" stopColor="#10B981" stopOpacity="0" />
                </linearGradient>
              </defs>
            </svg>
          </div>
        </div>

        {/* Activities */}
        <div>
          <Activities activities={activities} />
        </div>
      </div>

      {/* Recent Documents */}
      <div>
        <DocumentTable documents={recentDocuments} />
      </div>
    </div>
  );
}
